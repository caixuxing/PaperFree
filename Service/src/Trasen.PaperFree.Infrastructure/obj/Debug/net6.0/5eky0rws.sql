BEGIN 

execute immediate 'CREATE TABLE "ANNOTATION_TABLE" (
    "ID" NVARCHAR2(50) NOT NULL,
    "ARCHIVE_ID" NVARCHAR2(50) NOT NULL,
    "FILE_ID" NVARCHAR2(50) NOT NULL,
    "ORG_CODE" NVARCHAR2(50) NOT NULL,
    "HOSP_CODE" NVARCHAR2(50) NOT NULL,
    "ANNOTATION" NVARCHAR2(1000),
    "DEPT_CODE" NVARCHAR2(50) NOT NULL,
    "REMARK" NVARCHAR2(200),
    "LOWER" NVARCHAR2(20),
    "AN_NOT_ATION_DATE" TIMESTAMP(7),
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_ANNOTATION_TABLE" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_ANNOTATION_TABLE"
BEFORE INSERT OR UPDATE ON "ANNOTATION_TABLE"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "ANNOTATION_TABLE" is N'批注表'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."ID" is N'主键ID'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."ARCHIVE_ID" is N'档案号'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."FILE_ID" is N'文件id'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."ANNOTATION" is N'批注内容'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."DEPT_CODE" is N'批注科室编码'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."REMARK" is N'备注'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."LOWER" is N'评分 '/


COMMENT ON COLUMN "ANNOTATION_TABLE"."AN_NOT_ATION_DATE" is N'批注日期'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "ANNOTATION_TABLE"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "ARCHIVE_APPLY" (
    "ID" NVARCHAR2(50) NOT NULL,
    "ARCHIVAL_ID" NVARCHAR2(50) NOT NULL,
    "ARCHIVE_NAME" NVARCHAR2(50) NOT NULL,
    "CURRENT_STATUS" NUMBER(10) NOT NULL,
    "IS_END" NUMBER(1) NOT NULL,
    "PROCESS_DESIGN_ID" NVARCHAR2(50) NOT NULL,
    "CURRENT_APPROVAL_NODE_ID" NVARCHAR2(50) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_ARCHIVE_APPLY" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_ARCHIVE_APPLY"
BEFORE INSERT OR UPDATE ON "ARCHIVE_APPLY"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "ARCHIVE_APPLY" is N'归档申请'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."ID" is N'主键ID'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."ARCHIVAL_ID" is N'档案号'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."ARCHIVE_NAME" is N'申请名称,默认为当前病案人归档作为名称，批量为批量归档申请'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."CURRENT_STATUS" is N'状态 流程状态：开始》审批中》结束 、作废'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."IS_END" is N'流程是否结束 状态：是 、否'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."PROCESS_DESIGN_ID" is N'流程模板ID 绑定当前当前申请审批模板'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."CURRENT_APPROVAL_NODE_ID" is N'当前审批节点ID '/


COMMENT ON COLUMN "ARCHIVE_APPLY"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "ARCHIVE_APPLY"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "ARCHIVER_MEUM" (
    "ID" NVARCHAR2(50) NOT NULL,
    "FATHER_MEUMID" NVARCHAR2(20) NOT NULL,
    "MEUM_NAME" NVARCHAR2(30) NOT NULL,
    "PARENT_DIRECTORYID" NVARCHAR2(20),
    "PERMISSION" NVARCHAR2(20) NOT NULL,
    "MEUM_TYPE" NVARCHAR2(4),
    "ORDERBY" NVARCHAR2(2000) NOT NULL,
    "SECRET_LEVEL" NVARCHAR2(4) NOT NULL,
    "IS_HIGHSHOTS" NVARCHAR2(4) NOT NULL,
    "IS_SIGNATURE" NVARCHAR2(4) NOT NULL,
    "IS_ALLORG" NVARCHAR2(4) NOT NULL,
    "ORG_CODE" NVARCHAR2(30) NOT NULL,
    "HOSP_CODE" NVARCHAR2(15) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_ARCHIVER_MEUM" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_ARCHIVER_MEUM"
BEFORE INSERT OR UPDATE ON "ARCHIVER_MEUM"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "ARCHIVER_MEUM" is N'归档菜单目录'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."ID" is N'主键ID'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."FATHER_MEUMID" is N'目录编码'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."MEUM_NAME" is N'目录名称'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."PARENT_DIRECTORYID" is N'上级目录ID'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."PERMISSION" is N'根据权限设置医护所能操作的目录'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."MEUM_TYPE" is N'目录类型（1、目录，2、节点）'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."ORDERBY" is N'排序'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."SECRET_LEVEL" is N'保密等级'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."IS_HIGHSHOTS" is N'是否高拍'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."IS_SIGNATURE" is N'是否签名'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."IS_ALLORG" is N'是否适用所有机构（0、否；1、是）'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."HOSP_CODE" is N'保密等级'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "ARCHIVER_MEUM"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "BASE_BORROW_MODE" (
    "ID" NVARCHAR2(50) NOT NULL,
    "MODE_NAME" NVARCHAR2(20) NOT NULL,
    "DEPT_CODE" NVARCHAR2(20) NOT NULL,
    "USER_CODE" NVARCHAR2(20) NOT NULL,
    "ORG_CODE" NVARCHAR2(10) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "InputCode" NVARCHAR2(2000) NOT NULL,
    "IS_ENABLE" NVARCHAR2(10) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_BASE_BORROW_MODE" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_BASE_BORROW_MODE"
BEFORE INSERT OR UPDATE ON "BASE_BORROW_MODE"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "BASE_BORROW_MODE" is N'借阅模板设置'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."ID" is N'主键ID'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."MODE_NAME" is N'模板名称'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."DEPT_CODE" is N'科室编码'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."USER_CODE" is N'用户编码'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."ORG_CODE" is N'院区编码'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."IS_ENABLE" is N'是否启用'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "BASE_BORROW_MODE"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "BASE_WATERMARK" (
    "WATERMARK_ID" NVARCHAR2(50) NOT NULL,
    "WATERMARK_NAME" NVARCHAR2(20),
    "USE_SCENE" NVARCHAR2(20) NOT NULL,
    "COLOR" NVARCHAR2(20) NOT NULL,
    "BIG" NVARCHAR2(20),
    "XSTATION" NUMBER(10) NOT NULL,
    "YSTATION" NUMBER(10) NOT NULL,
    "ANGLE" NUMBER(10) NOT NULL,
    "STYLE" NVARCHAR2(10),
    "DIRECTION" NVARCHAR2(10) NOT NULL,
    "FONT" NVARCHAR2(10) NOT NULL,
    "PELLUCIDITY" NUMBER(10),
    "HIGHT" NUMBER(10) NOT NULL,
    "WIDTH" NUMBER(10) NOT NULL,
    "IS_SUITABLE" NVARCHAR2(10),
    "PICTURE" CLOB,
    "PICX" NVARCHAR2(10),
    "PICY" NVARCHAR2(10),
    "STATUS" NVARCHAR2(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "INPUT_CODE" NVARCHAR2(20) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_BASE_WATERMARK" PRIMARY KEY ("WATERMARK_ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_BASE_WATERMARK"
BEFORE INSERT OR UPDATE ON "BASE_WATERMARK"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "BASE_WATERMARK" is N'水印表'/


COMMENT ON COLUMN "BASE_WATERMARK"."WATERMARK_ID" is N'主键ID'/


COMMENT ON COLUMN "BASE_WATERMARK"."WATERMARK_NAME" is N'水印名称'/


COMMENT ON COLUMN "BASE_WATERMARK"."USE_SCENE" is N'使用场景'/


COMMENT ON COLUMN "BASE_WATERMARK"."COLOR" is N'颜色'/


COMMENT ON COLUMN "BASE_WATERMARK"."BIG" is N'大小'/


COMMENT ON COLUMN "BASE_WATERMARK"."XSTATION" is N'x坐标'/


COMMENT ON COLUMN "BASE_WATERMARK"."YSTATION" is N'y坐标'/


COMMENT ON COLUMN "BASE_WATERMARK"."ANGLE" is N'角度'/


COMMENT ON COLUMN "BASE_WATERMARK"."STYLE" is N'样式'/


COMMENT ON COLUMN "BASE_WATERMARK"."DIRECTION" is N'方向'/


COMMENT ON COLUMN "BASE_WATERMARK"."FONT" is N'字体'/


COMMENT ON COLUMN "BASE_WATERMARK"."PELLUCIDITY" is N'透明度'/


COMMENT ON COLUMN "BASE_WATERMARK"."HIGHT" is N'高度'/


COMMENT ON COLUMN "BASE_WATERMARK"."WIDTH" is N'宽度'/


COMMENT ON COLUMN "BASE_WATERMARK"."IS_SUITABLE" is N'是否合适大小'/


COMMENT ON COLUMN "BASE_WATERMARK"."PICTURE" is N'图片'/


COMMENT ON COLUMN "BASE_WATERMARK"."PICX" is N'PicX'/


COMMENT ON COLUMN "BASE_WATERMARK"."PICY" is N'PicY'/


COMMENT ON COLUMN "BASE_WATERMARK"."STATUS" is N'状态'/


COMMENT ON COLUMN "BASE_WATERMARK"."ORG_CODE" is N'使用机构'/


COMMENT ON COLUMN "BASE_WATERMARK"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "BASE_WATERMARK"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "BASE_WATERMARK"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "BASE_WATERMARK"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "BASE_WATERMARK"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "BASE_WATERMARK"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "BASE_WATERMARK"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "BASE_WATERMARK"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "CASE_SHELF_MANAGEMENT" (
    "ID" NVARCHAR2(50) NOT NULL,
    "WAREHOUSE_NUMBER" NVARCHAR2(20) NOT NULL,
    "WAREHOUSE_NAME" NVARCHAR2(20) NOT NULL,
    "SHELF_NO" NVARCHAR2(20) NOT NULL,
    "STORAGE_NUMBER_SEGMENT" NVARCHAR2(20) NOT NULL,
    "LINE_NUMBER" NVARCHAR2(10) NOT NULL,
    "NUMBER_OLUMNS" NVARCHAR2(10) NOT NULL,
    "STATUS" NVARCHAR2(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "INPUT_CODE" NVARCHAR2(20) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_CASE_SHELF_MANAGEMENT" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_CASE_SHELF_MANAGEMENT"
BEFORE INSERT OR UPDATE ON "CASE_SHELF_MANAGEMENT"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "CASE_SHELF_MANAGEMENT" is N'纸质病例存储管理'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."ID" is N'主键ID'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."WAREHOUSE_NUMBER" is N'仓库编号'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."WAREHOUSE_NAME" is N'仓库名称'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."SHELF_NO" is N'病架号'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."STORAGE_NUMBER_SEGMENT" is N'存储号段'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."LINE_NUMBER" is N'行数'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."NUMBER_OLUMNS" is N'列数'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."STATUS" is N'状态'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "CASE_SHELF_MANAGEMENT"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "ESSENTIAL_DOCUMENTS" (
    "ID" NVARCHAR2(50) NOT NULL,
    "DEPT_CODE" NVARCHAR2(20) NOT NULL,
    "FATHER_MEUMID" NVARCHAR2(20) NOT NULL,
    "MEUM_TYPE" NVARCHAR2(10) NOT NULL,
    "STATUS" NVARCHAR2(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "INPUT_CODE" NVARCHAR2(20) NOT NULL,
    "ORDERID" NUMBER(10),
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_ESSENTIAL_DOCUMENTS" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_ESSENTIAL_DOCUMENTS"
BEFORE INSERT OR UPDATE ON "ESSENTIAL_DOCUMENTS"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "ESSENTIAL_DOCUMENTS" is N'必传文件配置'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."ID" is N'主键ID'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."DEPT_CODE" is N'科室编码'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."FATHER_MEUMID" is N'目录编码'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."MEUM_TYPE" is N'目录类型'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."STATUS" is N'状态'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."ORG_CODE" is N'使用机构'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."ORDERID" is N'排序'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "ESSENTIAL_DOCUMENTS"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "FILES_HIS" (
    "ID" NVARCHAR2(50) NOT NULL,
    "ARCHIVE_ID" NVARCHAR2(50) NOT NULL,
    "MEUM_ID" NVARCHAR2(50) NOT NULL,
    "FILE_ID" NVARCHAR2(50) NOT NULL,
    "FILE_TRUENAME" NVARCHAR2(200),
    "FILE_SAVENAME" NVARCHAR2(200),
    "FILE_TYPE" NVARCHAR2(10),
    "FILE_PATH" NVARCHAR2(200),
    "FILE_SIZE" NVARCHAR2(10),
    "ORDER_NO" NVARCHAR2(10),
    "STATUS" NVARCHAR2(10),
    "STORAGE_STATE" NVARCHAR2(10),
    "REMARK" NVARCHAR2(200),
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_FILES_HIS" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_FILES_HIS"
BEFORE INSERT OR UPDATE ON "FILES_HIS"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "FILES_HIS" is N'HIS文件表'/


COMMENT ON COLUMN "FILES_HIS"."ID" is N'主键ID'/


COMMENT ON COLUMN "FILES_HIS"."ARCHIVE_ID" is N'档案号ID'/


COMMENT ON COLUMN "FILES_HIS"."MEUM_ID" is N'批注内容'/


COMMENT ON COLUMN "FILES_HIS"."FILE_ID" is N'文件唯-ID'/


COMMENT ON COLUMN "FILES_HIS"."FILE_TRUENAME" is N'文件原名称'/


COMMENT ON COLUMN "FILES_HIS"."FILE_SAVENAME" is N'文件保存后名称'/


COMMENT ON COLUMN "FILES_HIS"."FILE_TYPE" is N'文件类型格式'/


COMMENT ON COLUMN "FILES_HIS"."FILE_PATH" is N'文件存储路径'/


COMMENT ON COLUMN "FILES_HIS"."FILE_SIZE" is N'文件大小'/


COMMENT ON COLUMN "FILES_HIS"."ORDER_NO" is N'排序号'/


COMMENT ON COLUMN "FILES_HIS"."STATUS" is N'状态【物理文件上传状态】'/


COMMENT ON COLUMN "FILES_HIS"."STORAGE_STATE" is N'文件存储状态【临时、正式】'/


COMMENT ON COLUMN "FILES_HIS"."REMARK" is N'备注'/


COMMENT ON COLUMN "FILES_HIS"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "FILES_HIS"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "FILES_HIS"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "FILES_HIS"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "FILES_HIS"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "FILES_HIS"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "INPATIENT_INFO" (
    "ARCHIVE_ID" NVARCHAR2(50) NOT NULL,
    "HospRecordId" NVARCHAR2(2000) NOT NULL,
    "ADMISS_ID" NVARCHAR2(18) NOT NULL,
    "INPATIENT_ID" NVARCHAR2(18) NOT NULL,
    "VISIT_ID" NUMBER(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(10),
    "INPUT_CODE" NVARCHAR2(20),
    "HospName" NVARCHAR2(2000) NOT NULL,
    "OrgName" NVARCHAR2(2000),
    "NAME" NVARCHAR2(10) NOT NULL,
    "SEX_TYPE" NVARCHAR2(4) NOT NULL,
    "DATE_OF_BIRTH" TIMESTAMP(7) NOT NULL,
    "AGE" NUMBER(10),
    "ID_CARD" NVARCHAR2(18),
    "ENTER_DATE" TIMESTAMP(7) NOT NULL,
    "ENTER_DEPT" NVARCHAR2(15) NOT NULL,
    "ENTER_WARD_CODE" NVARCHAR2(20) NOT NULL,
    "DOCTOR_ZYYS_CODE" NVARCHAR2(20),
    "DOCTOR_ZZYS_CODE" NVARCHAR2(20),
    "DOCTOR_KZR_CODE" NVARCHAR2(20),
    "CHARGE_NURSE_CODE" NVARCHAR2(20),
    "GET_DATE" TIMESTAMP(7),
    "PmrfType" NVARCHAR2(2000) NOT NULL,
    "SIGN_STATUS" NVARCHAR2(2),
    "FILE_FLAG" NVARCHAR2(2) NOT NULL,
    CONSTRAINT "PK_INPATIENT_INFO" PRIMARY KEY ("ARCHIVE_ID")
)';
END;/


COMMENT ON TABLE "INPATIENT_INFO" is N'在院病人就诊信息表'/


COMMENT ON COLUMN "INPATIENT_INFO"."ARCHIVE_ID" is N'档案号（主键）'/


COMMENT ON COLUMN "INPATIENT_INFO"."ADMISS_ID" is N'住院号'/


COMMENT ON COLUMN "INPATIENT_INFO"."INPATIENT_ID" is N'住院ID'/


COMMENT ON COLUMN "INPATIENT_INFO"."VISIT_ID" is N'住院次数'/


COMMENT ON COLUMN "INPATIENT_INFO"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "INPATIENT_INFO"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "INPATIENT_INFO"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "INPATIENT_INFO"."NAME" is N'姓名'/


COMMENT ON COLUMN "INPATIENT_INFO"."SEX_TYPE" is N'性别'/


COMMENT ON COLUMN "INPATIENT_INFO"."DATE_OF_BIRTH" is N'出生日期'/


COMMENT ON COLUMN "INPATIENT_INFO"."AGE" is N'年龄'/


COMMENT ON COLUMN "INPATIENT_INFO"."ID_CARD" is N'身份证号'/


COMMENT ON COLUMN "INPATIENT_INFO"."ENTER_DATE" is N'入院时间'/


COMMENT ON COLUMN "INPATIENT_INFO"."ENTER_DEPT" is N'入院科室'/


COMMENT ON COLUMN "INPATIENT_INFO"."ENTER_WARD_CODE" is N'病区编码'/


COMMENT ON COLUMN "INPATIENT_INFO"."DOCTOR_ZYYS_CODE" is N'住院医生编号'/


COMMENT ON COLUMN "INPATIENT_INFO"."DOCTOR_ZZYS_CODE" is N'主治医生编号'/


COMMENT ON COLUMN "INPATIENT_INFO"."DOCTOR_KZR_CODE" is N'科主任编号'/


COMMENT ON COLUMN "INPATIENT_INFO"."CHARGE_NURSE_CODE" is N'责任护士编号'/


COMMENT ON COLUMN "INPATIENT_INFO"."GET_DATE" is N'采集时间'/


COMMENT ON COLUMN "INPATIENT_INFO"."SIGN_STATUS" is N'签名状态0、待签名；1、签名中；2、已签名'/


COMMENT ON COLUMN "INPATIENT_INFO"."FILE_FLAG" is N'文件采集标志（0未采集，1已采集）'/


BEGIN 

execute immediate 'CREATE TABLE "MedicalRecor" (
    "ID" NVARCHAR2(50) NOT NULL,
    "MedicalRecorNo" NVARCHAR2(2000) NOT NULL,
    "MedicalRecorTitle" NVARCHAR2(2000) NOT NULL,
    "MedicalRecorStatus" NUMBER(10) NOT NULL,
    "CreatorId" NVARCHAR2(50) NOT NULL,
    "CreationTime" TIMESTAMP(7) NOT NULL,
    "LastModifyTime" TIMESTAMP(7),
    "LastModifyId" NVARCHAR2(50),
    "RowVersion" RAW(8) NOT NULL,
    "IsDeleted" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_MedicalRecor" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_MedicalRecor"
BEFORE INSERT OR UPDATE ON "MedicalRecor"
FOR EACH ROW
BEGIN
  :NEW."RowVersion" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."RowVersion", '00000000')) + 1);
END;/


COMMENT ON TABLE "MedicalRecor" is N'病案'/


COMMENT ON COLUMN "MedicalRecor"."ID" is N'主键ID'/


COMMENT ON COLUMN "MedicalRecor"."CreatorId" is N'创建人ID'/


COMMENT ON COLUMN "MedicalRecor"."LastModifyId" is N'更新者ID'/


COMMENT ON COLUMN "MedicalRecor"."RowVersion" is N'版本号'/


COMMENT ON COLUMN "MedicalRecor"."IsDeleted" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "NODE_APPROVER" (
    "ID" NVARCHAR2(50) NOT NULL,
    "PROCESS_DESIGN_ID" NVARCHAR2(50) NOT NULL,
    "NODE_NAME" NVARCHAR2(50) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_NODE_APPROVER" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_NODE_APPROVER"
BEFORE INSERT OR UPDATE ON "NODE_APPROVER"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "NODE_APPROVER" is N'节点审批人员表'/


COMMENT ON COLUMN "NODE_APPROVER"."ID" is N'主键ID'/


COMMENT ON COLUMN "NODE_APPROVER"."PROCESS_DESIGN_ID" is N'节点ID'/


COMMENT ON COLUMN "NODE_APPROVER"."NODE_NAME" is N'审批人ID'/


COMMENT ON COLUMN "NODE_APPROVER"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "NODE_APPROVER"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "NODE_APPROVER"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "NODE_APPROVER"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "NODE_APPROVER"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "NODE_APPROVER"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "OUTPATIENT_INFO" (
    "ARCHIVE_ID" NVARCHAR2(50) NOT NULL,
    "HOSP_RECORD_ID" NVARCHAR2(18) NOT NULL,
    "PATIENT_ID" NVARCHAR2(18) NOT NULL,
    "ADMISS_ID" NVARCHAR2(18) NOT NULL,
    "INPATIENT_ID" NVARCHAR2(18) NOT NULL,
    "VISIT_ID" NUMBER(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(10),
    "INPUT_CODE" NVARCHAR2(20),
    "NAME" NVARCHAR2(10) NOT NULL,
    "SEX_TYPE" NVARCHAR2(4) NOT NULL,
    "DATE_OF_BIRTH" TIMESTAMP(7) NOT NULL,
    "AGE" NUMBER(10),
    "ID_CARD" NVARCHAR2(18),
    "ENTER_DATE" TIMESTAMP(7) NOT NULL,
    "OUT_DATE" TIMESTAMP(7) NOT NULL,
    "ENTER_DEPT_CODE" NVARCHAR2(15) NOT NULL,
    "OUT_DEPT_CODE" NVARCHAR2(15) NOT NULL,
    "OUT_WARD_CODE" NVARCHAR2(20),
    "DOCTOR_KZR_CODE" NVARCHAR2(20),
    "DOCTOR_ZRYS_CODE" NVARCHAR2(20),
    "DOCTOR_ZZYS_CODE" NVARCHAR2(20),
    "DOCTOR_ZYYS_CODE" NVARCHAR2(20),
    "CHARGE_NURSE_CODE" NVARCHAR2(20),
    "BASY_STATUS" NVARCHAR2(20),
    "DAYS" NUMBER(10),
    "IS_OVERDATE" NVARCHAR2(20),
    "CREATE_DATE_TIME" TIMESTAMP(7),
    "FILE_FLAG" NVARCHAR2(20) NOT NULL,
    "STATUS" NUMBER(10) NOT NULL,
    "CASE_TYPE" NVARCHAR2(20),
    "IS_LOCK" NVARCHAR2(20),
    CONSTRAINT "PK_OUTPATIENT_INFO" PRIMARY KEY ("ARCHIVE_ID")
)';
END;/


COMMENT ON TABLE "OUTPATIENT_INFO" is N'在院病人就诊信息表'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ARCHIVE_ID" is N'档案号（主键）'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."HOSP_RECORD_ID" is N'就诊号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."PATIENT_ID" is N'病案号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ADMISS_ID" is N'住院号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."INPATIENT_ID" is N'住院ID'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."VISIT_ID" is N'住院次数'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."NAME" is N'姓名'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."SEX_TYPE" is N'性别'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DATE_OF_BIRTH" is N'出生日期'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."AGE" is N'年龄'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ID_CARD" is N'身份证号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ENTER_DATE" is N'入院时间'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."OUT_DATE" is N'出院时间'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."ENTER_DEPT_CODE" is N'入院科室'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."OUT_DEPT_CODE" is N'出院科室'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."OUT_WARD_CODE" is N'病区编码'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DOCTOR_KZR_CODE" is N'科主任编号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DOCTOR_ZRYS_CODE" is N'主任医生编号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DOCTOR_ZZYS_CODE" is N'主治医生编号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DOCTOR_ZYYS_CODE" is N'住院医生编号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."CHARGE_NURSE_CODE" is N'责任护士编号'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."BASY_STATUS" is N'首页录入标志（编目标志）'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."DAYS" is N'年龄(天)'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."IS_OVERDATE" is N'是否逾期'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."CREATE_DATE_TIME" is N'创建时间'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."FILE_FLAG" is N'文件采集标志（0未采集，1已采集）'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."STATUS" is N'状态'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."CASE_TYPE" is N'入院方式，1.门诊  2.住院'/


COMMENT ON COLUMN "OUTPATIENT_INFO"."IS_LOCK" is N'是否锁定（0未锁定，1锁定，2解锁,3解锁中）'/


BEGIN 

execute immediate 'CREATE TABLE "PAY_CONFIG" (
    "ID" NVARCHAR2(50) NOT NULL,
    "SERVICE_PROVIDERS" NVARCHAR2(30) NOT NULL,
    "APP_ID" NUMBER(10) NOT NULL,
    "APP_SECRET" NVARCHAR2(40) NOT NULL,
    "MERCHANT_NUMBER" NVARCHAR2(40) NOT NULL,
    "CALLBACK_URL" NVARCHAR2(50) NOT NULL,
    "INTERFACE_VERSION" NVARCHAR2(10) NOT NULL,
    "TOKEN" NVARCHAR2(200) NOT NULL,
    "ENCRYPTION_KEY" NVARCHAR2(200) NOT NULL,
    "COMPLETIONNOTIFICATION" NVARCHAR2(50) NOT NULL,
    "IS_ENABLE" NUMBER(10) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "INPUT_CODE" NVARCHAR2(20) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_PAY_CONFIG" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_PAY_CONFIG"
BEFORE INSERT OR UPDATE ON "PAY_CONFIG"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "PAY_CONFIG" is N'支付配置表'/


COMMENT ON COLUMN "PAY_CONFIG"."ID" is N'主键ID'/


COMMENT ON COLUMN "PAY_CONFIG"."SERVICE_PROVIDERS" is N'服务提供者'/


COMMENT ON COLUMN "PAY_CONFIG"."APP_ID" is N'AppID'/


COMMENT ON COLUMN "PAY_CONFIG"."APP_SECRET" is N'AppSecret'/


COMMENT ON COLUMN "PAY_CONFIG"."MERCHANT_NUMBER" is N'商户号'/


COMMENT ON COLUMN "PAY_CONFIG"."CALLBACK_URL" is N'回调URL'/


COMMENT ON COLUMN "PAY_CONFIG"."INTERFACE_VERSION" is N'接口版本'/


COMMENT ON COLUMN "PAY_CONFIG"."TOKEN" is N'Token'/


COMMENT ON COLUMN "PAY_CONFIG"."ENCRYPTION_KEY" is N'加密密钥'/


COMMENT ON COLUMN "PAY_CONFIG"."COMPLETIONNOTIFICATION" is N'支付成功通知模板'/


COMMENT ON COLUMN "PAY_CONFIG"."IS_ENABLE" is N'是否启用'/


COMMENT ON COLUMN "PAY_CONFIG"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "PAY_CONFIG"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "PAY_CONFIG"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "PAY_CONFIG"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "PAY_CONFIG"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "PAY_CONFIG"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "PAY_CONFIG"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "PAY_CONFIG"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "PAY_CONFIG"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "PROCESS_DESIGN" (
    "ID" NVARCHAR2(50) NOT NULL,
    "PROCESS_NAME" NVARCHAR2(20) NOT NULL,
    "PROCESS_CODE" NVARCHAR2(20) NOT NULL,
    "PROCESS_TEMP_TYPE" NVARCHAR2(20) NOT NULL,
    "DEPT_CODE" NVARCHAR2(20) NOT NULL,
    "IS_ENABLE" NUMBER(1) NOT NULL,
    "ORG_CODE" NVARCHAR2(20) NOT NULL,
    "HOSP_CODE" NVARCHAR2(20) NOT NULL,
    "INPUT_CODE" NVARCHAR2(20) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_PROCESS_DESIGN" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_PROCESS_DESIGN"
BEFORE INSERT OR UPDATE ON "PROCESS_DESIGN"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "PROCESS_DESIGN" is N'流程设计'/


COMMENT ON COLUMN "PROCESS_DESIGN"."ID" is N'主键ID'/


COMMENT ON COLUMN "PROCESS_DESIGN"."PROCESS_NAME" is N'流程代码值'/


COMMENT ON COLUMN "PROCESS_DESIGN"."PROCESS_CODE" is N'流程名称'/


COMMENT ON COLUMN "PROCESS_DESIGN"."PROCESS_TEMP_TYPE" is N'流程模板类型'/


COMMENT ON COLUMN "PROCESS_DESIGN"."DEPT_CODE" is N'科室编码'/


COMMENT ON COLUMN "PROCESS_DESIGN"."IS_ENABLE" is N'是否启用'/


COMMENT ON COLUMN "PROCESS_DESIGN"."ORG_CODE" is N'结构编码'/


COMMENT ON COLUMN "PROCESS_DESIGN"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "PROCESS_DESIGN"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "PROCESS_DESIGN"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "PROCESS_DESIGN"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "PROCESS_DESIGN"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "PROCESS_DESIGN"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "PROCESS_DESIGN"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "PROCESS_DESIGN"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "SYS_OPER_LOG" (
    "ID" NVARCHAR2(50) NOT NULL,
    "TITLE" NVARCHAR2(20),
    "BUSINESS_TYPE" NVARCHAR2(20),
    "REQUEST_METHOD" NVARCHAR2(100) NOT NULL,
    "REQUEST_TYPE" NVARCHAR2(10) NOT NULL,
    "OPERATOR_TYPE" NVARCHAR2(20) NOT NULL,
    "OPER_NAME" NVARCHAR2(20),
    "REQUEST_URL" NVARCHAR2(100) NOT NULL,
    "OPER_IP" NVARCHAR2(20) NOT NULL,
    "OPER_ADDR" NVARCHAR2(50),
    "REQUEST_PARAM" NVARCHAR2(2000),
    "JSON_RESULT" NVARCHAR2(2000),
    "STATUS" NVARCHAR2(20) NOT NULL,
    "ERROR_MSG" NVARCHAR2(2000),
    "OPER_TIME" TIMESTAMP(7) NOT NULL,
    "ELAPSED" NUMBER(19) NOT NULL,
    "ORG_CODE" NVARCHAR2(20),
    "HOSP_CODE" NVARCHAR2(20),
    "INPUT_CODE" NVARCHAR2(20),
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_SYS_OPER_LOG" PRIMARY KEY ("ID")
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_SYS_OPER_LOG"
BEFORE INSERT OR UPDATE ON "SYS_OPER_LOG"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "SYS_OPER_LOG" is N'系统操作日志'/


COMMENT ON COLUMN "SYS_OPER_LOG"."ID" is N'主键ID'/


COMMENT ON COLUMN "SYS_OPER_LOG"."TITLE" is N'操作模块'/


COMMENT ON COLUMN "SYS_OPER_LOG"."BUSINESS_TYPE" is N'业务类型'/


COMMENT ON COLUMN "SYS_OPER_LOG"."REQUEST_METHOD" is N'请求方法名'/


COMMENT ON COLUMN "SYS_OPER_LOG"."REQUEST_TYPE" is N'请求方式'/


COMMENT ON COLUMN "SYS_OPER_LOG"."OPERATOR_TYPE" is N'操作类别'/


COMMENT ON COLUMN "SYS_OPER_LOG"."OPER_NAME" is N'操作人'/


COMMENT ON COLUMN "SYS_OPER_LOG"."REQUEST_URL" is N'请求Url'/


COMMENT ON COLUMN "SYS_OPER_LOG"."OPER_IP" is N'操作IP地址'/


COMMENT ON COLUMN "SYS_OPER_LOG"."OPER_ADDR" is N'操作地址'/


COMMENT ON COLUMN "SYS_OPER_LOG"."REQUEST_PARAM" is N'请求参数'/


COMMENT ON COLUMN "SYS_OPER_LOG"."JSON_RESULT" is N'返回参数'/


COMMENT ON COLUMN "SYS_OPER_LOG"."STATUS" is N'操作状态'/


COMMENT ON COLUMN "SYS_OPER_LOG"."ERROR_MSG" is N'错误消息'/


COMMENT ON COLUMN "SYS_OPER_LOG"."OPER_TIME" is N'操作时间'/


COMMENT ON COLUMN "SYS_OPER_LOG"."ELAPSED" is N'操作用时'/


COMMENT ON COLUMN "SYS_OPER_LOG"."ORG_CODE" is N'机构编码'/


COMMENT ON COLUMN "SYS_OPER_LOG"."HOSP_CODE" is N'院区编码'/


COMMENT ON COLUMN "SYS_OPER_LOG"."INPUT_CODE" is N'辖区编码'/


COMMENT ON COLUMN "SYS_OPER_LOG"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "SYS_OPER_LOG"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "SYS_OPER_LOG"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "SYS_OPER_LOG"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "SYS_OPER_LOG"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "SYS_OPER_LOG"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "ARCHIVE_APPROVER" (
    "ID" NVARCHAR2(50) NOT NULL,
    "ARCHIVE_APPLY_ID" NVARCHAR2(50) NOT NULL,
    "APPROVAL_RESULT" NUMBER(10) NOT NULL,
    "APPROVAL_REMARK" NVARCHAR2(300),
    "APPROVAL_ID" NVARCHAR2(50) NOT NULL,
    "APPROVAL_DATE_TIME" TIMESTAMP(7) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_ARCHIVE_APPROVER" PRIMARY KEY ("ID"),
    CONSTRAINT "FK_ARCHIVE_APPLY_ID" FOREIGN KEY ("ARCHIVE_APPLY_ID") REFERENCES "ARCHIVE_APPLY" ("ID") ON DELETE CASCADE
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_ARCHIVE_APPROVER"
BEFORE INSERT OR UPDATE ON "ARCHIVE_APPROVER"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "ARCHIVE_APPROVER" is N'归档审批记录表'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."ID" is N'主键ID'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."ARCHIVE_APPLY_ID" is N'归档申请ID'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."APPROVAL_RESULT" is N'审批结果'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."APPROVAL_REMARK" is N'审批备注'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."APPROVAL_ID" is N'审批人ID'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."APPROVAL_DATE_TIME" is N'审批时间'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "ARCHIVE_APPROVER"."IS_DELETED" is N'删除标识'/


BEGIN 

execute immediate 'CREATE TABLE "PROCESS_NODE" (
    "ID" NVARCHAR2(50) NOT NULL,
    "PROCESS_DESIGN_ID" NVARCHAR2(50) NOT NULL,
    "NODE_NAME" NVARCHAR2(50) NOT NULL,
    "NODE_CODE" NVARCHAR2(20) NOT NULL,
    "UPPER_NODE_ID" NVARCHAR2(50) NOT NULL,
    "LOWER_NODE_ID" NVARCHAR2(50) NOT NULL,
    "NODE_MAP_WORKFLOW_STATUS" NUMBER(10) NOT NULL,
    "EVENT_DIRECTION" NVARCHAR2(50),
    "IS_REJECT_TO_NODE" NUMBER(1),
    "REJECT_NODE_ID" NVARCHAR2(50),
    "ODER_NO" NUMBER(10) NOT NULL,
    "CREATOR_ID" NVARCHAR2(50) NOT NULL,
    "CREATION_TIME" TIMESTAMP(7) NOT NULL,
    "LAST_MODIFY_TIME" TIMESTAMP(7),
    "LAST_MODIFY_ID" NVARCHAR2(50),
    "ROW_VERSION" RAW(8) NOT NULL,
    "IS_DELETED" NUMBER(1) NOT NULL,
    CONSTRAINT "PK_PROCESS_NODE" PRIMARY KEY ("ID"),
    CONSTRAINT "FK_PROCESS_DESIGN_ID" FOREIGN KEY ("PROCESS_DESIGN_ID") REFERENCES "PROCESS_DESIGN" ("ID") ON DELETE CASCADE
)';
END;/


CREATE OR REPLACE TRIGGER "rowversion_PROCESS_NODE"
BEFORE INSERT OR UPDATE ON "PROCESS_NODE"
FOR EACH ROW
BEGIN
  :NEW."ROW_VERSION" := UTL_RAW.CAST_FROM_BINARY_INTEGER(UTL_RAW.CAST_TO_BINARY_INTEGER(NVL(:OLD."ROW_VERSION", '00000000')) + 1);
END;/


COMMENT ON TABLE "PROCESS_NODE" is N'流程节点'/


COMMENT ON COLUMN "PROCESS_NODE"."ID" is N'主键ID'/


COMMENT ON COLUMN "PROCESS_NODE"."PROCESS_DESIGN_ID" is N'流程主键ID'/


COMMENT ON COLUMN "PROCESS_NODE"."NODE_NAME" is N'节点名称'/


COMMENT ON COLUMN "PROCESS_NODE"."NODE_CODE" is N'节点代码值'/


COMMENT ON COLUMN "PROCESS_NODE"."UPPER_NODE_ID" is N'上级节点'/


COMMENT ON COLUMN "PROCESS_NODE"."LOWER_NODE_ID" is N'下级节点'/


COMMENT ON COLUMN "PROCESS_NODE"."NODE_MAP_WORKFLOW_STATUS" is N'节点对应流程状态'/


COMMENT ON COLUMN "PROCESS_NODE"."EVENT_DIRECTION" is N'事件方向 【拒绝、驳回、 通过】'/


COMMENT ON COLUMN "PROCESS_NODE"."IS_REJECT_TO_NODE" is N'是否可驳回指定节点'/


COMMENT ON COLUMN "PROCESS_NODE"."REJECT_NODE_ID" is N'驳回节点'/


COMMENT ON COLUMN "PROCESS_NODE"."ODER_NO" is N'排序号'/


COMMENT ON COLUMN "PROCESS_NODE"."CREATOR_ID" is N'创建人ID'/


COMMENT ON COLUMN "PROCESS_NODE"."CREATION_TIME" is N'创建时间'/


COMMENT ON COLUMN "PROCESS_NODE"."LAST_MODIFY_TIME" is N'最后修改时间'/


COMMENT ON COLUMN "PROCESS_NODE"."LAST_MODIFY_ID" is N'更新者ID'/


COMMENT ON COLUMN "PROCESS_NODE"."ROW_VERSION" is N'版本号'/


COMMENT ON COLUMN "PROCESS_NODE"."IS_DELETED" is N'删除标识'/


CREATE INDEX "IX_ARCHIVE_APPLY_ID" ON "ARCHIVE_APPROVER" ("ARCHIVE_APPLY_ID")/


CREATE INDEX "IX_PROCESS_DESIGN_ID" ON "PROCESS_NODE" ("PROCESS_DESIGN_ID")/


